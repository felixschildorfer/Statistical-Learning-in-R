vx=var(x)
vy=var(y)
cxy=cov(x,y)
(vy - cxy)/(vx+vy - 2*cxy)
}
alpha(Portfolio$X,Portfolio$Y)
attach(Portfolio)
# Attach Data
attach(Portfolio)
alpha <- function(x,y){
vx=var(x)
vy=var(y)
cxy=cov(x,y)
(vy - cxy)/(vx+vy - 2*cxy)
}
alpha(X, Y)
alpha.fn <- function(data,index){
with(data[index,],alpha(X,Y))
}
alpha.fn(Portfolio,1:100)
# Set Seed
set.seed(579)
alpha.fn(Portfolio,sample(1:100, 100, replace = TRUE))
boot.out = boot(Portfolio, alpha.fn, R = 1000)
boot.out
plot(boot.out$data)
# Use Bootstrap
boot.out = boot(Portfolio, alpha.fn, R = 1000)
boot.out
plot(boot.out)
library(ISLR)
summary(Hitters)
# Load the attached data dataissp.csv
dissp <- read.csv(file="C:/Users/felix.schildorfer/Documents/Private/dataissp/dataissp.csv", header=TRUE, sep=";")
attach(dissp)
# Subset participants from Slovakia and from Turkey
slo <- subset(dissp, V4 == 703)
tur <- subset(dissp, V4 == 792)
# Clean Data
slo <- subset(slo, !(EDUCYRS %in% c(95, 96, 98, 99))
& AGE!= 999 & SEX != 9 & !(V48 %in% c(8, 9))
& !(V50 %in% c(8, 9)) & !(V52  %in% c(8, 9)))
tur <- subset(tur, !(EDUCYRS %in% c(95, 96, 98, 99))
& AGE!= 999 & SEX != 9 & !(V48 %in% c(8, 9))
& !(V50 %in% c(8, 9)) & !(V52  %in% c(8, 9)))
difference <- abs(slo_mean - tur_mean)
# Average Age for Both countries
slo_mean <- mean(slo$AGE)
tur_mean <-mean(tur$AGE)
difference <- abs(slo_mean - tur_mean)
difference
# Average Age for Both countries
slo_mean <- mean(slo$AGE)
# Summary of Age Statistics
summary(slo$AGE)
summary(tur$AGE)
# Perform t-test
t.test(slo$AGE, tur$AGE)
# Correlation coefficient between age and the new immigration
cor(slo$Support, slo$AGE)
# Correlation coefficient between age and the new immigration
cor(slo$Support, slo$AGE)
# Create Boxplot
boxplot(slo$Support)
boxplot(tur$Support)
# Load the attached data dataissp.csv
dissp <- read.csv(file="C:/Users/felix.schildorfer/Documents/Private/dataissp/dataissp.csv", header=TRUE, sep=";")
attach(dissp)
# Subset participants from Slovakia and from Turkey
slo <- subset(dissp, V4 == 703)
tur <- subset(dissp, V4 == 792)
# Clean Data
slo <- subset(slo, !(EDUCYRS %in% c(95, 96, 98, 99))
& AGE!= 999 & SEX != 9 & !(V48 %in% c(8, 9))
& !(V50 %in% c(8, 9)) & !(V52  %in% c(8, 9)))
tur <- subset(tur, !(EDUCYRS %in% c(95, 96, 98, 99))
& AGE!= 999 & SEX != 9 & !(V48 %in% c(8, 9))
& !(V50 %in% c(8, 9)) & !(V52  %in% c(8, 9)))
# Average Age for Both countries
slo_mean <- mean(slo$AGE)
tur_mean <-mean(tur$AGE)
difference <- abs(slo_mean - tur_mean)
# Max and Min Age for both countries
max(slo$AGE)
max(tur$AGE)
min(slo$AGE)
min(tur$AGE)
# Summary of Age Statistics
summary(slo$AGE)
summary(tur$AGE)
# Perform t-test
t.test(slo$AGE, tur$AGE)
# Find mean Support for each Country
slo$Support <- (slo$V48 + slo$V50 + slo$V52)/3
tur$Support <- (tur$V48 + tur$V50 + tur$V52)/3
mean(slo$Support)
mean(tur$Support)
# Correlation coefficient between age and the new immigration
cor(slo$Support, slo$AGE)
cor(tur$Support, tur$AGE)
cor(tur$Support, tur$AGE)
# Run Regressions
slo_lm <- lm(Support ~ SEX + AGE + EDUCYRS, data = slo)
summary(slo_lm)
tur_lm <- lm(Support ~ SEX + AGE + EDUCYRS, data = tur)
summary(tur_lm)
# Load the attached data data2.csv
d2 <- read.csv(file="C:/Users/felix.schildorfer/Documents/Private/dataissp/data2.csv", header=TRUE, sep=";")
attach(d2)
# Subset participants from Philippines and from Hungary
phi <- subset(d2, V4 == 608)
hun <- subset(d2, V4 == 348)
# Clean Data
phi <- subset(phi, !(EDUCYRS %in% c(95, 96, 98, 99))
& AGE!= 999 & SEX != 9 & !(V48 %in% c(8, 9))
& !(V50 %in% c(8, 9)) & !(V52  %in% c(8, 9)))
hun <- subset(hun, !(EDUCYRS %in% c(95, 96, 98, 99))
& AGE!= 999 & SEX != 9 & !(V48 %in% c(8, 9))
& !(V50 %in% c(8, 9)) & !(V52  %in% c(8, 9)))
# Average EDUCYRS for Both countries
mean(phi$EDUCYRS)
difference <- abs(mean(phi$EDUCYRS) - mean(hun$EDUCYRS))
difference
# Average EDUCYRS for Both countries
mean(phi$EDUCYRS)
mean(hun$EDUCYRS)
# Average EDUCYRS for Both countries
mean(phi$EDUCYRS)
# Summary of EDUCYRS Statistics
summary(phi$EDUCYRS)
summary(hun$EDUCYRS)
# Find mean Support for each Country
phi$Support <- (phi$V48 + phi$V50 + phi$V52)/3
hun$Support <- (hun$V48 + hun$V50 + hun$V52)/3
mean(phi$Support)
mean(hun$Support)
# Perform t-test
t.test(phi$EDUCYRS, hun$EDUCYRS)
# Create Histogram
hist(phi$Support, xlab = "Support")
abline(v = median(phi$Support), col = "green", lwd = 2)
hist(hun$Support, xlab = "Support")
abline(v = median(hun$Support), col = "green", lwd = 2)
# Correlation coefficient between age and the new immigration
cor(phi$Support, phi$EDUCYRS)
cor(hun$Support, hun$EDUCYRS)
summary(phi_lm)
# Run Regression
phi_lm <- lm(Support ~ SEX + AGE + EDUCYRS, data = phi)
summary(phi_lm)
hun_lm <- lm(Support ~ SEX + AGE + EDUCYRS, data = hun)
summary(hun_lm)
# Call library and attach Data
library(ISLR)
attach(Wage)
fit = lm(wage~poly(age,4))
summary(fit)
# Run Non-Linear Regression
fit <- lm(wage ~ poly(age,4))
summary(fit)
#
agelims <- range(age)
#
agelims <- range(age)
age.grid=seq(from = agelims[1], to = agelims[2])
#
agelims <- range(age)
age.grid <- seq(from = agelims[1], to = agelims[2])
preds=predict(fit,newdata <- list(age=age.grid),se = T)
se.bands <- cbind(preds$fit + 2*preds$se.fit,preds$fit -2*preds$se.fit)
plot(age,wage,col = "darkgrey")
lines(age.grid,preds$fit, lwd = 2, col = "blue")
matlines(age.grid,se.bands,col = "blue",lty=2)
fita = lm(wage~age+I(age^2)+I(age^3)+I(age^4))
summary(fita)
plot(fitted(fit),fitted(fita))
#
agelims <- range(age)
age.grid <- seq(from = agelims[1], to = agelims[2])
preds=predict(fit,newdata <- list(age=age.grid),se = T)
se.bands <- cbind(preds$fit + 2*preds$se.fit,preds$fit -2*preds$se.fit)
plot(age,wage, col = "darkgrey")
lines(age.grid,preds$fit, lwd = 2, col = "blue")
matlines(age.grid,se.bands,col = "blue",lty=2)
fita = lm(wage~education)
fitb = lm(wage~education + age)
fitc = lm(wage~education + poly(age,2))
fitd = lm(wage~education + poly(age,3))
anova(fita,fitb,fitc,fitd)
fit = glm(I(wage>250) ~ poly(age,3),family = binomial)
summary(fit)
preds=predict(fit,list(age=age.grid),se=T)
se.bands=preds$fit +cbind(fit=0,lower=-2*preds$se.fit,upper=2*preds$se.fit)
se.bands[1:5,]
prob.bands=exp((se.bands)/(1+exp(se.bands))
prob.bands <- exp((se.bands)/(1+exp(se.bands))
prob.bands <- exp((se.bands)/(1+exp(se.bands)))
matplot(age.grid,prob.bands,col="blue",lwd=c(2,1,1),lty=c(1,2,2),type="l",ylim=c(0,1))
anova(fita,fitb,fitc,fitd)
write.csv("Hitters.csv",Hitters)
write.csv(Hitters, "Hitters.csv")
write.csv(Wage,"Wage.csv")
require(splines2)
require(gam)
# Regression
fit=lm(wage~bs(age, knots = c(25,40,60)))
attach(Wage)
install.packages("splines2")
install.packages("gam")
# Call Libraries and attach Data
require(splines2)
require(gam)
require(ISLR)
attach(Wage)
# Regression
fit=lm(wage~bs(age, knots = c(25,40,60)))
plot(age,wage, col = "darkgrey")
lines(age.grid,predict(fit,list(age = age.grid)), col ="darkblue", lwd = 2)
abline(v = c(25,40,60),lty = 2, col = "lightblue")
fit <- smooth.spline(age,wage,df = 16)
lines(fit,col = "red", lwd = 2)
fit <- smooth.spline(age, wage,cv = T)
lines(fit, col = "green", lwd = 2)
fit
# With Cross Validation
fit2 <- smooth.spline(age, wage,cv = T)
lines(fit, col = "green", lwd = 2)
fit
gam1  <- gam(wage~s(age,df=4)+s(year,df=4)+education)
par(mfrow=c(1,3))
plot(gam1,se=T)
gam2=gam(I(wage>250)~s(age,df=4)+s(year,df=4)+education)
anova(gam1,gam2,test="Chisq")
gam2 <- gam(I(wage>250)~s(age,df=4)+s(year,df=4)+education)
anova(gam1,gam2,test="Chisq")
gam2 <- gam(I(wage>250)~ s(age,df=4) + s(year,df=4) + education)
anova(gam1,gam2,test="Chisq")
lm1 <- lm(wage~ns(age,df=4) + ns(year,df=4) + education)
plot.gam(lm1,se=T)
# Plot data and visualize different Sections
fit <- lm(wage~bs(age, knots = c(25,40,60)))
plot(age,wage, col = "darkgrey")
lines(age.grid,predict(fit,list(age = age.grid)), col ="darkblue", lwd = 2)
abline(v = c(25,40,60),lty = 2, col = "lightblue")
par(mfrow=c(1,1))
# Plot data and visualize different Sections
fit <- lm(wage~ bs(age, knots = c(25,40,60)))
plot(age,wage, col = "darkgrey")
lines(age.grid,predict(fit,list(age = age.grid)), col ="darkblue", lwd = 2)
abline(v = c(25,40,60),lty = 2, col = "lightblue")
# Fit Spline Model
fit1 <- smooth.spline(age, wage, df = 16)
lines(fit,col = "red", lwd = 2)
# Plot data and visualize different Sections
fit <- lm(wage~ bs(age, knots = c(25,40,60)))
plot(age,wage, col = "darkgrey")
lines(age.grid,predict(fit,list(age = age.grid)), col ="darkblue", lwd = 2)
abline(v = c(25,40,60),lty = 2, col = "lightblue")
# Call Libraries and attach Data
require(splines2)
require(gam)
require(ISLR)
attach(Wage)
# Plot data and visualize different Sections
fit <- lm(wage~ bs(age, knots = c(25,40,60)))
plot(age,wage, col = "darkgrey")
lines(age.grid,predict(fit,list(age = age.grid)), col ="darkblue", lwd = 2)
# Fit Spline Model
fit1 <- smooth.spline(age, wage, df = 16)
lines(fit,col = "red", lwd = 2)
fit=lm(wage~bs(age,knots = c(25,40,60)))
plot(age,wage,col="darkgrey")
lines(age.grid, predict(fit,list(age=age.grid)),col="darkblue",lwd=2)
abline(v=c(25,40,60),lty=2,col="lightblue")
fit=smooth.spline(age,wage,df=16)
lines(fit,col="red",lwd=2)
# Fit Spline Model
fit1 <- smooth.spline(age, wage, df = 16)
lines(fit,col = "red", lwd = 2)
# Plot data and visualize different Sections
fit <- lm(wage~ bs(age, knots = c(25,40,60)))
plot(age,wage, col = "darkgrey")
lines(age.grid,predict(fit,list(age = age.grid)), col ="darkblue", lwd = 2)
abline(v = c(25,40,60),lty = 2, col = "lightblue")
# Fit Spline Model
fit1 <- smooth.spline(age, wage, df = 16)
lines(fit,col = "red", lwd = 2)
# With Cross Validation
fit2 <- smooth.spline(age, wage,cv = T)
lines(fit, col = "green", lwd = 2)
fit=lm(wage~bs(age,knots = c(25,40,60)))
plot(age,wage,col="darkgrey")
lines(age.grid, predict(fit,list(age=age.grid)),col="darkblue",lwd=2)
abline(v=c(25,40,60),lty=2,col="lightblue")
fit=smooth.spline(age,wage,df=16)
lines(fit,col="red",lwd=2)
fit=smooth.spline(age,wage,cv=T)
lines(fit,col="green",lwd=2)
fit
require(gam)
gam1=gam(wage~s(age,df=4)+s(year,df=4)+education)
par(mfrow=c(1,3))
plot(gam1,se=T)
gam2=gam(I(wage>250)~s(age,df=4)+s(year,df=4)+education)
anova(gam1,gam2,test="Chisq")
lm1=lm(wage~ns(age,df=4) + ns(year,df=4)+education)
plot.gam(lm1,se=T)
# Plot data and visualize different Sections
fit <- lm(wage~ bs(age, knots = c(25,40,60)))
plot(age,wage, col = "darkgrey")
lines(age.grid,predict(fit,list(age = age.grid)), col ="darkblue", lwd = 2)
abline(v = c(25,40,60), lty = 2, col = "lightblue")
# Fit Spline Model
fit1 <- smooth.spline(age, wage, df = 16)
lines(fit,col = "red", lwd = 2)
# With Cross Validation
fit2 <- smooth.spline(age, wage,cv = T)
lines(fit, col = "green", lwd = 2)
fit
# Fit GAM
gam1  <- gam(wage~s(age,df=4)+s(year,df=4)+education)
par(mfrow=c(1,1))
# Call Libraries and attach Data
require(splines2)
require(gam)
require(ISLR)
attach(Wage)
# Plot data and visualize different Sections
fit <- lm(wage~ bs(age, knots = c(25,40,60)))
plot(age,wage, col = "darkgrey")
lines(age.grid,predict(fit,list(age = age.grid)), col ="darkblue", lwd = 2)
abline(v = c(25,40,60), lty = 2, col = "lightblue")
# Fit Spline Model
fit1 <- smooth.spline(age, wage, df = 16)
lines(fit,col = "red", lwd = 2)
# Fit Spline Model
fit1 <- smooth.spline(age, wage, df = 16)
lines(fit,col = "red", lwd = 2)
plot(age,wage, col = "darkgrey")
lines(age.grid,predict(fit,list(age = age.grid)), col ="darkblue", lwd = 2)
# Plot data and visualize different Sections
fit <- lm(wage~bs(age, knots = c(25, 40, 60)))
plot(age,wage, col = "darkgrey")
lines(age.grid,predict(fit, list(age = age.grid)), col ="darkblue", lwd = 2)
# Call Libraries and Attach Data
require(ISLR)
require(tree)
attach(Carseats)
hist(Sales)
# Visualize Sales
hist(Sales)
# Create New Variable and Compare
High= ifelse(Sales<=8,"Yes","No")
Carseats = data.frame(Carseats,High)
# Create New Dataframe with Custom Variable
High= ifelse(Sales<=8,"Yes","No")
Carseats = data.frame(Carseats,High)
tree.carseats <- tree(High~.-Sales)
# Call Libraries and Attach Data
require(ISLR)
require(tree)
install.packages("tree")
require(tree)
tree.carseats <- tree(High~.-Sales)
attach(Carseats)
tree.carseats <- tree(High~.-Sales)
tree.carseats <- tree(High~.-Sales, data = Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats)
tree.carseats
# Call Libraries and Attach Data
require(ISLR)
require(tree)
attach(Carseats)
# Visualize Sales
hist(Sales)
# Create New Dataframe with Custom Variable
High= ifelse(Sales<=8,"Yes","No")
Carseats = data.frame(Carseats,High)
tree.carseats <- tree(High~.-Sales, data = Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats)
View(Carseats)
set.seed(3)
set.seed(3)
train <- sample(1:nrow(Carseats), 250)
tree.carseats <- tree(High~.-Sales,Carseats,subset = train)
plot(tree.carseats)
text(tree.carseats, pretty = 0)
tree.pre <- predict(tree.carseats, Carseats[-train], type = "class")
with(Carseats[-train], table(tree.pre,High))
# Train and Predict New Variable using Treemodel
set.seed(3)
train <- sample(1:nrow(Carseats), 300)
tree.carseats <- tree(High~.-Sales,Carseats,subset = train)
plot(tree.carseats)
text(tree.carseats, pretty = 0)
tree.pre <- predict(tree.carseats, Carseats[-train], type = "class")
with(Carseats[-train], table(tree.pre,High))
# Cross Validate Model
cv.carseats <- cv.tree(tree.carseats, FUN = prune.misclass)
cv.carseats
plot(cv.carseats)
prune.carseats = prune.misclass(tree.carseats, best = 13)
plot(prune.carseats)
text(prune.carseats)
#
prune.carseats = prune.misclass(tree.carseats, best = 13)
plot(prune.carseats)
text(prune.carseats)
prune.pre <- predict(prune.carseats, Carseats[-train], type = "class")
with(Carseats[-train], table(prune.pre, High))
cv.carseats
attach(Carseats)
View(Carseats)
write.csv(Carseats, )
Carseats <- Carseats[-High.1]
Carseats <- Carseats[-"High.1"]
Carseats <- Carseats[!High.1]
Carseats <- Carseats[,-c["High", "High.1", High.2]]
Carseats <- Carseats[,-c("High", "High.1", High.2)]
Carseats <- Carseats[,-c("High", "High.1", "High.2")]
Carseats <- subset(Carseats, ,-c("High", "High.1", "High.2"))
Carseats <- subset(Carseats,-c("High", "High.1", "High.2"))
Carseats <- subset(Carseats,-c(12:14))
Carseats <- Carseats[,-c(12:14)]
View(Carseats)
write.csv(Carseats,"Carseats.csv")
# Visualize Sales
hist(Sales)
# Create New Dataframe with Custom Variable
High <- ifelse(Sales <= 8, "Yes", "No")
Carseats <- data.frame(Carseats, High)
# Create and examining tree-model
tree.carseats <- tree(High~.-Sales, data = Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats)
# Train and Predict New Variable using Treemodel
set.seed(3)
train <- sample(1:nrow(Carseats), 300)
tree.carseats <- tree(High~.-Sales,Carseats,subset = train)
plot(tree.carseats)
text(tree.carseats, pretty = 0)
tree.pre <- predict(tree.carseats, Carseats[-train], type = "class")
with(Carseats[-train], table(tree.pre,High))
# Cross Validate Model
cv.carseats <- cv.tree(tree.carseats, FUN = prune.misclass)
cv.carseats
plot(cv.carseats)
# Prune Tree and Check Results
prune.carseats = prune.misclass(tree.carseats, best = 13)
plot(prune.carseats)
text(prune.carseats)
prune.pre <- predict(prune.carseats, Carseats[-train], type = "class")
with(Carseats[-train], table(prune.pre, High))
# Load Libraries
library(MASS)
library(ISLR)
# Attach and Explore Data
attach(Boston)
names(Boston)
plot(medv ~ lstat)
# Run OLS Linear Regresion
fit_1 <- lm(medv ~ lstat)
summary(fit_1)
abline(fit_1, col = "red")
# Look at Confidence Interval
confint(fit_1)
predict(fit_1, data.frame(lstat= c(5, 10, 13)), interval = "confidence")
# Add Variables
fit_2 <- lm(medv ~ lstat + age)
summary(fit_2)
abline(fit_2, col = "blue")
# Use all Variables
fit_3 <- lm(medv ~.)
summary(fit_3)
par(mfrow= c(2, 2))
plot(fit_3)
# Remove insignificant Variables
fit_4 <- update(fit_3,~.-age-indus)
summary(fit_4)
# Combine lstat and age Variable
fit_5 <- lm(medv~lstat*age)
summary(fit_5)
# Non-Linear Regression and Fit
fit_6 <- lm(medv ~ lstat + I(lstat^2))
summary(fit_6)
par(mfrow= c(1, 1))
plot(medv~lstat)
# Faster Method for Non-Linear Regression
fit_7 = lm(medv~poly(lstat, 4))
points(lstat,fitted(fit_7), col = "blue", pch = 20)
# Set Seed and Plot Data
set.seed(34)
x <- matrix(rnorm(100*2),100,2)
x_mean <- matrix(rnorm(8,sd=4),4,2)
which <- sample(1:4,100,replace=T)
x <- x + x_mean[which,]
plot(x,col=which,pch=19)
# K-Means
km.out <- kmeans(x,4,nstart=15)
km.out
# Plot Results
plot(x,col=km.out$cluster,cex = 2, pch=1,lwd=2)
points(x,col=which,pch=19)
points(x,col=c(4,3,2,1)[which],pch=19)
